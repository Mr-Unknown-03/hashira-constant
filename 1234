#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

// Convert string in given base (<= 36) to long long
long long toDecimal(const char *val, int base) {
    long long result = 0;
    for (int i = 0; val[i]; i++) {
        char c = val[i];
        int digit;
        if (c >= '0' && c <= '9') digit = c - '0';
        else if (c >= 'a' && c <= 'z') digit = c - 'a' + 10;
        else if (c >= 'A' && c <= 'Z') digit = c - 'A' + 10;
        else {
            fprintf(stderr, "Invalid digit %c\n", c);
            exit(1);
        }
        if (digit >= base) {
            fprintf(stderr, "Digit %c out of range for base %d\n", c, base);
            exit(1);
        }
        result = result * base + digit;
    }
    return result;
}

// Compute f(0) with Lagrange interpolation
long long lagrangeAtZero(int k, long long x[], long long y[]) {
    long double f0 = 0.0L;
    for (int i = 0; i < k; i++) {
        long double xi = x[i];
        long double yi = y[i];
        long double num = 1.0L, den = 1.0L;
        for (int j = 0; j < k; j++) {
            if (j == i) continue;
            num *= -x[j];
            den *= (xi - x[j]);
        }
        f0 += yi * (num / den);
    }
    return llround(f0); // round to nearest integer
}

int main() {
    int n, k;
    scanf("%d %d", &n, &k); // first line: n k

    long long x[100], y[100];

    for (int i = 0; i < n; i++) {
        int xi, base;
        char value[256];
        scanf("%d %d %s", &xi, &base, value);
        x[i] = xi;
        y[i] = toDecimal(value, base);
    }

    // Only use first k points
    long long xk[100], yk[100];
    for (int i = 0; i < k; i++) {
        xk[i] = x[i];
        yk[i] = y[i];
    }

    long long c = lagrangeAtZero(k, xk, yk);
    printf("%lld\n", c);

    return 0;
}
